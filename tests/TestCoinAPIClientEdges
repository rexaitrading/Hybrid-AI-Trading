    @patch("src.data.clients.coinapi_client.load_config")
    def test_headers_exception_branch_coinapierror(self, mock_load):
        """Force load_config to raise â†’ triggers CoinAPIError (lines 33, 39)"""
        mock_load.side_effect = Exception("config load failed")
        with self.assertRaises(CoinAPIError):
            _ = _get_headers()

    @patch("src.data.clients.coinapi_client._retry_get")
    @patch("src.data.clients.coinapi_client._get_headers")
    def test_call_returns_error_dict_triggers_guard(self, mock_headers, mock_retry):
        """Direct _call path returns {'error': ...} â†’ triggers guard (line 81)"""
        mock_headers.return_value = {"X-CoinAPI-Key": "FAKE"}
        mock_retry.return_value.json.return_value = {"error": "bad symbol"}
        with self.assertRaises(CoinAPIError):
            # symbol_quote=None â†’ uses direct _call() instead of candidates
            coinapi_client.get_ohlcv_latest("FAKE_ID", None, "1MIN", 1)

        @patch("src.data.clients.coinapi_client.load_config")
    def test_headers_invalid_config_exception_branch(self, mock_load):
        """Force load_config to return None â†’ triggers CoinAPIError (lines 33, 39)"""
        mock_load.return_value = None
        with self.assertRaises(CoinAPIError):
            _ = _get_headers()

    @patch("src.data.clients.coinapi_client._retry_get")
    @patch("src.data.clients.coinapi_client._get_headers")
    def test_direct_call_error_dict(self, mock_headers, mock_retry):
        """Direct _call returns {'error': ...} â†’ triggers guard (line 81)"""
        mock_headers.return_value = {"X-CoinAPI-Key": "FAKE"}
        mock_retry.return_value.json.return_value = {"error": "bad symbol"}
        with self.assertRaises(CoinAPIError):
            coinapi_client.get_ohlcv_latest("FAKE_ID", None, "1MIN", 1)

        @patch("src.data.clients.coinapi_client._get_headers")
    @patch("src.data.clients.coinapi_client.requests.get")
    def test_retry_get_non_retryable_error(self, mock_get, mock_headers):
        """Covers line 45: non-retryable HTTP error (404)"""
        mock_headers.return_value = {"X-CoinAPI-Key": "FAKE"}
        resp = MagicMock(status_code=404, text="not found")
        mock_get.return_value = resp
        with self.assertRaises(CoinAPIError) as cm:
            coinapi_client.get_fx_rate("BTC", "USD")
        self.assertIn("CoinAPI HTTP 404", str(cm.exception))

    @patch("src.data.clients.coinapi_client._get_headers")
    @patch("src.data.clients.coinapi_client.requests.get")
    def test_retry_get_exhausted_all_retries(self, mock_get, mock_headers):
        """Covers line 51: retries exhausted"""
        mock_headers.return_value = {"X-CoinAPI-Key": "FAKE"}
        # Always raise connection error
        mock_get.side_effect = Exception("connection fail")
        with self.assertRaises(CoinAPIError) as cm:
            coinapi_client.get_fx_rate("BTC", "USD")
        self.assertIn("failed after retries", str(cm.exception))

    @patch("src.data.clients.coinapi_client._get_headers")
    def test_all_candidates_fail_final_raise(self, mock_headers):
        """Covers line 104: all fallback candidates fail"""
        mock_headers.return_value = {"X-CoinAPI-Key": "FAKE"}

        def always_fail(*args, **kwargs):
            raise Exception("network down")

        with patch("src.data.clients.coinapi_client._retry_get", side_effect=always_fail):
            with self.assertRaises(CoinAPIError) as cm:
                coinapi_client.get_ohlcv_latest("BTC", "USD", "1MIN", 1)
            self.assertIn("OHLCV not found", str(cm.exception))

    class TestCoinAPIClientEdges(unittest.TestCase):
    """Edge-case tests for CoinAPI client"""

    @patch("src.data.clients.coinapi_client.load_config")
    def test_coinapi_missing_key_raises_runtimeerror(self, mock_load):
        mock_load.return_value = {"providers": {"coinapi": {"api_key_env": None}}}
        with self.assertRaises(RuntimeError):
            _ = _get_headers()

    # ðŸ‘‡ NEW TESTS BEGIN HERE ðŸ‘‡

    def test_retry_get_direct_non_retryable_error(self):
        """Direct call to _retry_get with 404 â†’ covers line 45"""
        with patch("src.data.clients.coinapi_client.requests.get") as mock_get, \
             patch("src.data.clients.coinapi_client._get_headers", return_value={"X-CoinAPI-Key": "FAKE"}):
            resp = MagicMock(status_code=404, text="not found")
            mock_get.return_value = resp
            with self.assertRaises(CoinAPIError):
                coinapi_client._retry_get("http://fake-url")

    def test_retry_get_direct_exhaust_retries(self):
        """Direct call to _retry_get exhausting all retries â†’ covers line 51"""
        with patch("src.data.clients.coinapi_client.requests.get", side_effect=Exception("fail")), \
             patch("src.data.clients.coinapi_client._get_headers", return_value={"X-CoinAPI-Key": "FAKE"}):
            with self.assertRaises(CoinAPIError):
                coinapi_client._retry_get("http://fake-url", max_retry=2, backoff=0)

    def test_get_ohlcv_latest_all_candidates_fail(self):
        """Force all fallback candidates to fail â†’ covers line 104"""
        with patch("src.data.clients.coinapi_client._get_headers", return_value={"X-CoinAPI-Key": "FAKE"}), \
             patch("src.data.clients.coinapi_client._retry_get", side_effect=Exception("exchange down")):
            with self.assertRaises(CoinAPIError) as cm:
                coinapi_client.get_ohlcv_latest("BTC", "USD", "1MIN", 1)
            self.assertIn("OHLCV not found", str(cm.exception))
