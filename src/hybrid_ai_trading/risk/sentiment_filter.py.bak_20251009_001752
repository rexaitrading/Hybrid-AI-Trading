"""
Sentiment Filter (Hybrid AI Quant Pro v16.0 – AAA Grade)
- VADER (default) / FinBERT optional
- YAML defaults (threshold / neutral_zone / smoothing / model)
- NEW: YAML-driven lexicon nudges (boost/block terms, ±0.05 default) with clamp
- Optional precomputed_score to avoid double-smoothing drift
"""

import logging
import math
from typing import List, Optional, Dict

import yaml
from dotenv import load_dotenv

logger = logging.getLogger(__name__)
load_dotenv()

# ------------------------------------------------------------------
# Load defaults from config.yaml
try:
    with open("config/config.yaml", "r", encoding="utf-8") as f:
        _cfg = yaml.safe_load(f) or {}
    _sf_cfg: Dict = _cfg.get("sentiment_filter", {}) or {}
    _lex_cfg: Dict = _cfg.get("sentiment_lexicon", {}) or {}
except Exception:
    _sf_cfg, _lex_cfg = {}, {}

DEFAULT_THRESHOLD = float(_sf_cfg.get("threshold", 0.6))
DEFAULT_NEUTRAL   = float(_sf_cfg.get("neutral_zone", 0.25))
DEFAULT_SMOOTH    = int(_sf_cfg.get("smoothing", 3))
DEFAULT_MODEL     = _sf_cfg.get("model", "vader")
DEFAULT_ENABLED   = bool(_sf_cfg.get("enabled", True))

LEXICON_BOOST_TERMS = [str(x) for x in _lex_cfg.get("boost_terms", [])]
LEXICON_BLOCK_TERMS = [str(x) for x in _lex_cfg.get("block_terms", [])]
LEXICON_BOOST_VAL   = float(_lex_cfg.get("boost_value", 0.05))
LEXICON_BLOCK_VAL   = float(_lex_cfg.get("block_value", -0.05))
LEXICON_CASE        = bool(_lex_cfg.get("case_sensitive", False))

# Safe optional imports
try:
    from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
except ImportError:
    SentimentIntensityAnalyzer = None
    logger.warning("⚠️ vaderSentiment not installed → VADER unavailable")

try:
    from transformers import pipeline
except ImportError:
    pipeline = None
    logger.warning("⚠️ transformers not installed → FinBERT unavailable")


class SentimentFilter:
    def __init__(
        self,
        enabled: bool = DEFAULT_ENABLED,
        threshold: float = DEFAULT_THRESHOLD,
        neutral_zone: float = DEFAULT_NEUTRAL,
        bias: str = "none",
        model: str = DEFAULT_MODEL,
        smoothing: int = DEFAULT_SMOOTH,
    ):
        self.enabled = enabled
        self.threshold = threshold
        self.neutral_zone = neutral_zone
        self.bias = bias
        self.model = model
        self.smoothing = max(1, smoothing)
        self.history: List[float] = []

        if not enabled:
            self.analyzer = None
        else:
            if model == "vader" and SentimentIntensityAnalyzer:
                self.analyzer = SentimentIntensityAnalyzer()
            elif model == "finbert" and pipeline:
                try:
                    self.analyzer = pipeline("sentiment-analysis", model="ProsusAI/finbert")
                except Exception as e:
                    self.analyzer = None
                    logger.warning(f" FinBERT unavailable  {e}")
            elif model not in ("vader", "finbert"):
                raise ValueError(f"Unknown model: {model}")
            else:
                self.analyzer = None
                logger.warning(f" Analyzer unavailable for model={model}")

        logger.info(
            " SentimentFilter init | model=%s threshold=%.2f neutral=%.2f smoothing=%d",
            self.model, self.threshold, self.neutral_zone, self.smoothing
        )

    # ----------------------------- helpers -----------------------------
    def _apply_lexicon_nudge(self, text: str, base: float) -> float:
        """Apply lexicon boosts/blocks and clamp to [0,1]."""
        if not (LEXICON_BOOST_TERMS or LEXICON_BLOCK_TERMS):
            return base
        hay = text if LEXICON_CASE else text.lower()
        nudge = 0.0
        # boosts
        for term in LEXICON_BOOST_TERMS:
            t = term if LEXICON_CASE else term.lower()
            if t and t in hay:
                nudge += LEXICON_BOOST_VAL
        # blocks
        for term in LEXICON_BLOCK_TERMS:
            t = term if LEXICON_CASE else term.lower()
            if t and t in hay:
                nudge += LEXICON_BLOCK_VAL
        out = max(0.0, min(1.0, base + nudge))
        return out

    # ------------------------------------------------------------------
    def score(self, text: str) -> float:
        """Return sentiment score  [0,1], with lexicon nudge."""
        if not self.enabled or self.analyzer is None:
            return 0.5

        try:
            if self.model == "vader":
                if not hasattr(self.analyzer, "polarity_scores"):
                    return 0.5
                result = self.analyzer.polarity_scores(text)
                compound = float(result.get("compound", 0.0))
                if math.isnan(compound):
                    return 0.0
                normalized = (compound + 1) / 2
            elif self.model == "finbert":
                if not callable(self.analyzer):
                    return 0.5
                result = self.analyzer(text)
                if not isinstance(result, list) or not result or not isinstance(result[0], dict):
                    return 0.0
                label = str(result[0].get("label","")).lower()
                sc = float(result[0].get("score", 0.5))
                normalized = sc if label == "positive" else (1 - sc if label == "negative" else 0.5)
            else:
                return 0.5
        except Exception as e:
            logger.error(" Sentiment scoring failed: %s", e)
            return 0.0

        # lexicon nudge + smoothing
        adjusted = self._apply_lexicon_nudge(text, normalized)

        if self.smoothing > 1:
            self.history.append(adjusted)
            if len(self.history) > self.smoothing:
                self.history.pop(0)
            return sum(self.history) / len(self.history)

        return adjusted

    # ------------------------------------------------------------------
    def allow_trade(self, headline: str, side: str = "BUY", precomputed_score: Optional[float] = None) -> bool:
        """Return True if trade is allowed under sentiment rules."""
        if not self.enabled or self.analyzer is None:
            return True

        score = precomputed_score if precomputed_score is not None else self.score(headline)
        side = (side or "BUY").upper()

        if side not in {"BUY","SELL","HOLD"} or side == "HOLD":
            return True

        if score < self.threshold:
            logger.warning(" Emotional Filter blocked %s | score=%.2f | threshold=%.2f", side, score, self.threshold)
            return False

        if abs(score - 0.5) <= self.neutral_zone:
            return True

        if self.bias == "bullish" and side == "SELL":
            return False
        if self.bias == "bearish" and side == "BUY":
            return False

        return True


if __name__ == "__main__":
    # quick demo using YAML defaults & lexicon
    from hybrid_ai_trading.data.clients.benzinga_client import BenzingaClient
    c = BenzingaClient()
    news = c.get_news("AAPL,TSLA", limit=10)
    filt = SentimentFilter()
    for s in news:
        title = s.get("title","")
        sc = filt.score(title)
        print(f"[{s.get('created')}] {title} | Score={sc:.2f}")
