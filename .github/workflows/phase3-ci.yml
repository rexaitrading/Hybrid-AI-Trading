name: Phase3 CI

on:
  workflow_dispatch:

  push:     branches: [ "main", "chore/*", "feature/*" ]
  pull_request:
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  # BEGIN replay-json-smoke (auto-injected)
  replay-json-smoke:
    if: ${{ vars.RUN_PHASE3_ENABLED == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pytest
      - name: Prepare sample CSV
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force C:\Data\minute | Out-Null
          $csv = 'C:\Data\minute\AAPL_2025-10-01.csv'
          $base = Get-Date '2025-10-01T09:30:00'
          $rows = @()
          $prices = @(10.00,10.10,10.20,10.35,10.40,10.48,10.65,10.72,10.68,10.74,10.70,10.76)
          for ($i=0; $i -lt $prices.Count; $i++) {
            $t=$base.AddMinutes($i); $o=if($i -eq 0){$prices[$i]}else{$prices[$i]-0.02}
            $c=$prices[$i]; $h=[Math]::Max($o,$c)+0.05; $l=[Math]::Min($o,$c)-0.05; $v=1000+($i*50)
            $rows += [pscustomobject]@{timestamp=$t.ToString("yyyy-MM-dd HH:mm:ss");open=("{0:F2}"-f $o);high=("{0:F2}"-f $h);low=("{0:F2}"-f $l);close=("{0:F2}"-f $c);volume=$v}
          }
          $tmp = Join-Path $env:TEMP aapl_minute_tmp.csv
          $rows | Export-Csv -Path $tmp -NoTypeInformation -Encoding utf8
          Copy-Item $tmp $csv -Force
          echo "REPLAY_CSV=$csv" >> $env:GITHUB_ENV
      - name: Wrapper JSON smoke
        run: |
          python scripts/replay_cli.py --csv "$env:REPLAY_CSV" --symbol AAPL --mode fast --speed 10 --fees-per-share 0.003 --slippage-ps 0.002 --orb-minutes 5 --risk-cents 20 --max-qty 200 --force-exit --summary json
  # END replay-json-smoke
  micro-tests:
    name: micro-tests (py3.12)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
    - name: Repo sanity guard
      shell: pwsh
      run: |
        \Stop='Stop'
        powershell -NoProfile -ExecutionPolicy Bypass -File scripts/ci/repo_sanity.ps1        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Install package and test deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pytest
          python -m pip install pyyaml
          python -m pip install -e .

      - name: Sanity
        run: |
          python - <<'PY'
          import sys, importlib.util, pathlib, yaml
          root = pathlib.Path().resolve()
          print("exe:", sys.executable)
          print("yaml_ok", yaml.__version__)
          print("has src:", (root/"src").exists())
          print("pytest.ini exists:", (root/"pytest.ini").exists())
          print("importable:", bool(importlib.util.find_spec("hybrid_ai_trading")))
          PY

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}/src:${{ github.workspace }}/tests
        run: |
          if [ -f "pytest.ini" ]; then
            python -m pytest -c "${{ github.workspace }}/pytest.ini" -q
          else
            python -m pytest -q
          fi
